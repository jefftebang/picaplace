{"ast":null,"code":"var _jsxFileName = \"/Users/zemiragabrielle/Documents/Jeff's/Web Development Course/MERN (Academind)/fligno/front-end/src/posts/pages/NewPost.js\";\nimport React, { useCallback, useReducer } from \"react\";\nimport \"./NewPost.css\";\nimport Input from \"../../global/components/form-comps/Input\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from \"../../global/configs/validators\";\nimport Button from \"../../global/components/form-comps/Button\";\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_CHANGE\":\n      let formIsValid = true;\n\n      for (const inputId in state.inputs) {\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n\n      return { ...state,\n        input: { ...state.inputs,\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        },\n        isValid: formIsValid\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst NewPost = props => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: {\n      location: {\n        value: \"\",\n        isValid: false\n      },\n      description: {\n        value: \"\",\n        isValid: false\n      }\n    },\n    isValid: false\n  });\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: \"INPUT_CHANGE\",\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"post-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"location\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Location\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Enter a valid location.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"description\",\n    element: \"textarea\",\n    label: \"Description\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Enter a valid description minimum 5 characters.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, \"POST\"));\n};\n\nexport default NewPost;","map":{"version":3,"sources":["/Users/zemiragabrielle/Documents/Jeff's/Web Development Course/MERN (Academind)/fligno/front-end/src/posts/pages/NewPost.js"],"names":["React","useCallback","useReducer","Input","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","Button","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","input","value","NewPost","props","formState","dispatch","location","description","inputHandler","id"],"mappings":"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","sourcesContent":["import React, { useCallback, useReducer } from \"react\";\nimport \"./NewPost.css\";\nimport Input from \"../../global/components/form-comps/Input\";\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH,\n} from \"../../global/configs/validators\";\nimport Button from \"../../global/components/form-comps/Button\";\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_CHANGE\":\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        input: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid },\n        },\n        isValid: formIsValid,\n      };\n    default:\n      return state;\n  }\n};\n\nconst NewPost = (props) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: {\n      location: {\n        value: \"\",\n        isValid: false,\n      },\n      description: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    isValid: false,\n  });\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: \"INPUT_CHANGE\",\n      value: value,\n      isValid: isValid,\n      inputId: id,\n    });\n  }, []);\n\n  return (\n    <form className=\"post-form\">\n      <Input\n        id=\"location\"\n        element=\"input\"\n        type=\"text\"\n        label=\"Location\"\n        validators={[VALIDATOR_REQUIRE()]}\n        errorText=\"Enter a valid location.\"\n        onInput={inputHandler}\n      />\n      <Input\n        id=\"description\"\n        element=\"textarea\"\n        label=\"Description\"\n        validators={[VALIDATOR_MINLENGTH(5)]}\n        errorText=\"Enter a valid description minimum 5 characters.\"\n        onInput={inputHandler}\n      />\n      <Button type=\"submit\" disabled={!formState.isValid}>\n        POST\n      </Button>\n    </form>\n  );\n};\n\nexport default NewPost;\n"]},"metadata":{},"sourceType":"module"}