{"ast":null,"code":"var _jsxFileName = \"/Users/zemiragabrielle/Documents/Jeff's/Web Development Course/MERN/fligno/front-end/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Users from \"./user/pages/Users\";\nimport NewPost from \"./posts/pages/NewPost\";\nimport MainNav from \"./global/components/Navbar/MainNav\";\nimport UserPosts from \"./posts/pages/UserPosts\";\nimport UpdatePost from \"./posts/pages/UpdatePost\";\nimport Login from \"./user/pages/Login\";\nimport SignUp from \"./user/pages/SignUp\";\nimport UserContext from \"./global/context/UserContext\";\n\nconst App = () => {\n  const [userData, setUserData] = useState({\n    token: undefined,\n    user: undefined\n  });\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      let token = localStorage.getItem(\"x-auth-token\");\n\n      if (token === null) {\n        localStorage.setItem(\"x-auth-token\", \"\");\n        token = \"\";\n      } // const tokenRes = await axios.post(\n      //   \"http://localhost:5001/api/users/tokenIsValid\",\n      //   null,\n      //   { headers: { \"x-auth-token\": token } }\n      // );\n      // if (tokenRes.data) {\n      //   const userRes = await axios.get(\n      //     \"http://localhost:5001/api/users/users\",\n      //     {\n      //       headers: { \"x-auth-token\": token },\n      //     }\n      //   );\n      //   setUserData({\n      //     token,\n      //     user: userRes.data,\n      //   });\n      // }\n\n    };\n\n    checkLoggedIn();\n  }, []); // let routes;\n  // if (sessionStorage.token) {\n  //   routes = (\n  //     <Switch>\n  //       <Route path=\"/users\" exact>\n  //         <Users />\n  //       </Route>\n  //       <Route path=\"/:userId/posts\" exact>\n  //         <UserPosts />\n  //       </Route>\n  //       <Route path=\"/posts/new\" exact>\n  //         <NewPost />\n  //       </Route>\n  //       <Route path=\"/posts/:postId\">\n  //         <UpdatePost />\n  //       </Route>\n  //       <Redirect to=\"/users\" />\n  //     </Switch>\n  //   );\n  // } else {\n  //   routes = (\n  //     <Switch>\n  //       <Route path=\"/login\">\n  //         <Login />\n  //       </Route>\n  //       <Route path=\"/signup\">\n  //         <SignUp />\n  //       </Route>\n  //       <Redirect to=\"/login\" />\n  //     </Switch>\n  //   );\n  // }\n\n  return /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: {\n      userData,\n      setUserData\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, sessionStorage.token === \"true\" && /*#__PURE__*/React.createElement(MainNav, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 45\n    }\n  }), /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/users\",\n    exact: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Users, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    path: \"/:userId/posts\",\n    exact: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(UserPosts, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    path: \"/posts/new\",\n    exact: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(NewPost, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    path: \"/posts/:postId\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(UpdatePost, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    path: \"/login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Login, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    path: \"/signup\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(SignUp, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  })), !sessionStorage.creator && /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 39\n    }\n  }))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/zemiragabrielle/Documents/Jeff's/Web Development Course/MERN/fligno/front-end/src/App.js"],"names":["React","useState","useEffect","BrowserRouter","Router","Switch","Route","Redirect","axios","Users","NewPost","MainNav","UserPosts","UpdatePost","Login","SignUp","UserContext","App","userData","setUserData","token","undefined","user","checkLoggedIn","localStorage","getItem","setItem","sessionStorage","creator"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport axios from \"axios\";\nimport Users from \"./user/pages/Users\";\nimport NewPost from \"./posts/pages/NewPost\";\nimport MainNav from \"./global/components/Navbar/MainNav\";\nimport UserPosts from \"./posts/pages/UserPosts\";\nimport UpdatePost from \"./posts/pages/UpdatePost\";\nimport Login from \"./user/pages/Login\";\nimport SignUp from \"./user/pages/SignUp\";\nimport UserContext from \"./global/context/UserContext\";\n\nconst App = () => {\n  const [userData, setUserData] = useState({\n    token: undefined,\n    user: undefined,\n  });\n\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      let token = localStorage.getItem(\"x-auth-token\");\n      if (token === null) {\n        localStorage.setItem(\"x-auth-token\", \"\");\n        token = \"\";\n      }\n      // const tokenRes = await axios.post(\n      //   \"http://localhost:5001/api/users/tokenIsValid\",\n      //   null,\n      //   { headers: { \"x-auth-token\": token } }\n      // );\n      // if (tokenRes.data) {\n      //   const userRes = await axios.get(\n      //     \"http://localhost:5001/api/users/users\",\n      //     {\n      //       headers: { \"x-auth-token\": token },\n      //     }\n      //   );\n      //   setUserData({\n      //     token,\n      //     user: userRes.data,\n      //   });\n      // }\n    };\n\n    checkLoggedIn();\n  }, []);\n\n  // let routes;\n  // if (sessionStorage.token) {\n  //   routes = (\n  //     <Switch>\n  //       <Route path=\"/users\" exact>\n  //         <Users />\n  //       </Route>\n  //       <Route path=\"/:userId/posts\" exact>\n  //         <UserPosts />\n  //       </Route>\n  //       <Route path=\"/posts/new\" exact>\n  //         <NewPost />\n  //       </Route>\n  //       <Route path=\"/posts/:postId\">\n  //         <UpdatePost />\n  //       </Route>\n  //       <Redirect to=\"/users\" />\n  //     </Switch>\n  //   );\n  // } else {\n  //   routes = (\n  //     <Switch>\n  //       <Route path=\"/login\">\n  //         <Login />\n  //       </Route>\n  //       <Route path=\"/signup\">\n  //         <SignUp />\n  //       </Route>\n  //       <Redirect to=\"/login\" />\n  //     </Switch>\n  //   );\n  // }\n\n  return (\n    <Router>\n      <UserContext.Provider value={{ userData, setUserData }}>\n        {sessionStorage.token === \"true\" && <MainNav />}\n        {/* {routes} */}\n        <Switch>\n          <Route path=\"/users\" exact>\n            <Users />\n          </Route>\n          <Route path=\"/:userId/posts\" exact>\n            <UserPosts />\n          </Route>\n          <Route path=\"/posts/new\" exact>\n            <NewPost />\n          </Route>\n          <Route path=\"/posts/:postId\">\n            <UpdatePost />\n          </Route>\n          {/* <Redirect to=\"/users\" /> */}\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <Route path=\"/signup\">\n            <SignUp />\n          </Route>\n          {!sessionStorage.creator && <Redirect to=\"/login\" />}\n        </Switch>\n      </UserContext.Provider>\n    </Router>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}